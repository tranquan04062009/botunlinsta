# CRE: TRANHAI AND SEA
import requests
import concurrent.futures
import time
import secrets  # Th∆∞ vi·ªán ƒë·ªÉ t·∫°o chu·ªói ng·∫´u nhi√™n an to√†n
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from datetime import datetime, timedelta

# Th√¥ng tin token bot Telegram (thay b·∫±ng token c·ªßa b·∫°n)
TOKEN = "7834807188:AAHIwCflT9qY-Vhjyu22HhSKHGyHANGUZHA"

# Dictionary ƒë·ªÉ l∆∞u key v√† th√¥ng tin ng∆∞·ªùi d√πng
user_keys = {}  # {user_id: {'key': key, 'expiration': expiration_date, 'verified': bool}}

# H√†m t·∫°o key v√† URL v·ªõi chu·ªói ng·∫´u nhi√™n
def generate_key_and_url(user_id):
    ngay = int(datetime.now().day)
    base_key = str(ngay * 27 + 27)
    random_str = secrets.token_hex(4)  # T·∫°o chu·ªói ng·∫´u nhi√™n 8 k√Ω t·ª± (hex)
    key = f'TMQ{base_key}-{user_id}-{random_str}'  # Key d·∫°ng TMQ54-123456789-abcd1234
    expiration_date = datetime.now().replace(hour=23, minute=59, second=0, microsecond=0)
    url = f'https://tranquankeybot.blogspot.com/2025/02/keybot.html?ma={key}'
    return url, key, expiration_date

# H√†m r√∫t g·ªçn URL b·∫±ng yeumoney
def get_shortened_link_phu(url):
    try:
        api_url = f"https://yeumoney.com/QL_api.php?token=5f8ca8734e93fabf98f50400ca8744f5d929aa41768059813680cc3f52fd4b1e&url={url}"
        response = requests.get(api_url)
        if response.status_code == 200:
            return response.text  # Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ link r√∫t g·ªçn
        else:
            return f"L·ªói API: {response.status_code}"
    except Exception as e:
        return f"L·ªói khi r√∫t g·ªçn link: {e}"

# H√†m ki·ªÉm tra xem ƒë√£ sang ng√†y m·ªõi ch∆∞a
def da_qua_gio_moi(expiration):
    return datetime.now() > expiration

# H√†m ch·∫°y spam (c·∫£i ti·∫øn v·ªõi th√¥ng b√°o chi ti·∫øt h∆°n)
def run(phone, i):
    functions = [
        tv360, robot, fb, mocha, dvcd, myvt, phar, dkimu, fptshop, meta, blu,
        tgdt, concung, money, sapo, hoang, winmart, alf, guma, kingz, acfc, phuc, medi, emart, hana,
        med, ghn, shop, gala, fa, cathay, vina, ahamove, air, otpmu, vtpost, shine, domi, fm, cir, hoanvu, tokyo, shop, beau, fu, lote, lon
    ]
    
    success_count = 0
    with concurrent.futures.ThreadPoolExecutor(max_workers=30) as executor:
        futures = [executor.submit(fn, phone) for fn in functions]
        for future in concurrent.futures.as_completed(futures):
            try:
                future.result()
                success_count += 1
            except Exception as exc:
                print(f'Generated an exception: {exc}')
    return f"Spam l·∫ßn {i}: Th√†nh c√¥ng {success_count}/{len(functions)} d·ªãch v·ª•"

# X·ª≠ l√Ω l·ªánh /sms
async def sms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = update.effective_user.id
    args = context.args

    # Ki·ªÉm tra key hi·ªán t·∫°i
    if user_id not in user_keys or da_qua_gio_moi(user_keys[user_id]['expiration']):
        url, key, expiration = generate_key_and_url(user_id)
        short_url = get_shortened_link_phu(url)
        user_keys[user_id] = {'key': key, 'expiration': expiration, 'verified': False}
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"Key c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a ƒë∆∞·ª£c t·∫°o.\nL·∫•y key t·∫°i: {short_url}\nReply tin nh·∫Øn n√†y v·ªõi key ƒë·ªÉ x√°c th·ª±c."
        )
        return

    # Ki·ªÉm tra x√°c th·ª±c
    if not user_keys[user_id]['verified']:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"Key hi·ªán t·∫°i c·ªßa b·∫°n: {user_keys[user_id]['key']}\nVui l√≤ng reply tin nh·∫Øn n√†y v·ªõi key ƒë·ªÉ x√°c th·ª±c."
        )
        return

    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng l·ªánh
    if len(args) != 2:
        await context.bot.send_message(chat_id=chat_id, text="C√∫ ph√°p: /sms <sdt> <s·ªë l·∫ßn spam>\nV√≠ d·ª•: /sms 0123456789 5")
        return

    phone, count = args[0], args[1]
    
    try:
        count = int(count)
        if count <= 0:
            raise ValueError("S·ªë l·∫ßn spam ph·∫£i l·ªõn h∆°n 0!")
    except ValueError as e:
        await context.bot.send_message(chat_id=chat_id, text=f"L·ªói: {str(e) if str(e) else 'S·ªë l·∫ßn spam ph·∫£i l√† s·ªë nguy√™n!'}")
        return

    # Th·ª±c hi·ªán spam
    await context.bot.send_message(chat_id=chat_id, text=f"üî• B·∫Øt ƒë·∫ßu spam {phone} {count} l·∫ßn...")
    for i in range(1, count + 1):
        result = run(phone, i)
        await context.bot.send_message(chat_id=chat_id, text=result)
        if i < count:  # Ch·ªâ ch·ªù n·∫øu ch∆∞a ph·∫£i l·∫ßn cu·ªëi
            for j in range(4, 0, -1):
                await context.bot.send_message(chat_id=chat_id, text=f"‚è≥ Ch·ªù {j} gi√¢y ƒë·ªÉ ti·∫øp t·ª•c...")
                time.sleep(1)
    await context.bot.send_message(chat_id=chat_id, text="‚úÖ ƒê√£ ho√†n t·∫•t spam!")

# X·ª≠ l√Ω x√°c th·ª±c key
async def verify_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_id = update.effective_user.id
    message = update.message.text.strip()

    if update.message.reply_to_message and user_id in user_keys:
        expected_key = user_keys[user_id]['key']
        if message == expected_key:
            user_keys[user_id]['verified'] = True
            await context.bot.send_message(chat_id=chat_id, text="‚úÖ Key x√°c th·ª±c th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ d√πng /sms ngay b√¢y gi·ªù.")
        else:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå Key kh√¥ng ƒë√∫ng! Vui l√≤ng ki·ªÉm tra l·∫°i.")
    else:
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è Vui l√≤ng reply tin nh·∫Øn y√™u c·∫ßu key ƒë·ªÉ x√°c th·ª±c!")

# H√†m kh·ªüi ƒë·ªông bot
def main():
    application = Application.builder().token(TOKEN).build()

    # Th√™m handler
    application.add_handler(CommandHandler("sms", sms_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, verify_key))

    # Ch·∫°y bot
    print("Bot ƒëang ch·∫°y...")
    application.run_polling()

if __name__ == "__main__":
    main()